plugins {
    id("com.github.johnrengelman.shadow") version "6.1.0"
    id("io.micronaut.application") version "1.3.4"
    id "org.sonarqube" version "3.1.1"
    id "jacoco"
    id "org.flywaydb.flyway" version "7.7.2"
}

version = "0.1"
group = "locsharex"

repositories {
    mavenCentral()
}

micronaut {
    runtime("netty")
    testRuntime("junit5")
    processing {
        incremental(true)
        annotations("locsharex.*")
    }
}

dependencies {
    annotationProcessor("io.micronaut.security:micronaut-security-annotations")
    annotationProcessor("io.micronaut.data:micronaut-data-processor")
    annotationProcessor("org.projectlombok:lombok")
    annotationProcessor("io.micronaut:micronaut-inject-java")
    annotationProcessor("io.micronaut:micronaut-graal")

    compileOnly("org.projectlombok:lombok")

    implementation("javax.annotation:javax.annotation-api")
    implementation("io.micronaut:micronaut-runtime")
    implementation("io.micronaut:micronaut-inject")
    implementation("io.micronaut.data:micronaut-data-hibernate-jpa")
    implementation("io.micronaut.sql:micronaut-jdbc-hikari")
    implementation("io.micronaut:micronaut-validation")
    implementation("io.micronaut:micronaut-http-client")
    implementation("io.micronaut.security:micronaut-security-oauth2")
    implementation("io.micronaut.security:micronaut-security-jwt")
    implementation("io.micronaut:micronaut-aop")

    implementation("io.micronaut.flyway:micronaut-flyway")

    runtimeOnly("ch.qos.logback:logback-classic")
    runtimeOnly("org.postgresql:postgresql")

    compileOnly("org.graalvm.nativeimage:svm")

    testAnnotationProcessor("io.micronaut:micronaut-inject-java")
    testImplementation("org.assertj:assertj-core")
    testImplementation("org.junit.jupiter:junit-jupiter-api")
    testImplementation("io.micronaut.test:micronaut-test-junit5")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine")
    testRuntimeOnly("org.testcontainers:postgresql")
}

application {
    mainClass.set("locsharex.Application")
}

java {
    sourceCompatibility = JavaVersion.toVersion("11")
    targetCompatibility = JavaVersion.toVersion("11")
}

sonarqube {
    properties {
        property 'sonar.host.url', 'http://localhost:9000'
        property 'sonar.login', 'admin'
        property 'sonar.password', 'a'
    }
}

tasks['sonarqube'].dependsOn test

jacocoTestReport {
    reports {
        xml.enabled true
    }
}

test {
    finalizedBy jacocoTestReport
    maxParallelForks 1
}

flyway { // e.g. gradle flywayClean on a local db
    url = 'jdbc:postgresql://localhost:5433/be'
    user = 'be'
    password = 'be'
}
